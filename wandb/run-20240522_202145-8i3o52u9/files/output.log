/home/pierre/miniconda3/envs/semisupervised/lib/python3.10/site-packages/evotorch/tools/misc.py:1107: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  result = torch.tensor(data, **kwargs)
Processing algorithm SNES at seed 0:   0%|                                                                                               | 0/15 [00:00<?, ?it/s]/home/pierre/miniconda3/envs/semisupervised/lib/python3.10/site-packages/evotorch/core.py:3425: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  shares_storage = self._data.storage().data_ptr() == source._data.storage().data_ptr()
Processing algorithm SNES at seed 0:   0%|                                                                                               | 0/15 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/home/pierre/git/ProbNES/semisupervised/main.py", line 139, in <module>
    run(save_path=alg_path,
  File "/home/pierre/git/ProbNES/semisupervised/module/bo.py", line 72, in run
    img = wandb.Image(optimizer.plot_synthesis())
  File "/home/pierre/git/ProbNES/semisupervised/module/optimizers.py", line 289, in plot_synthesis
    y_test = self.objective(X_test)
  File "/home/pierre/git/ProbNES/semisupervised/module/objective.py", line 49, in __call__
    f = self.evaluate_true(X=X)
  File "/home/pierre/miniconda3/envs/semisupervised/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/pierre/git/ProbNES/semisupervised/module/objective.py", line 36, in evaluate_true
    raise TypeError("Only torch tensor are allowed")
TypeError: Only torch tensor are allowed
Traceback (most recent call last):
  File "/home/pierre/git/ProbNES/semisupervised/main.py", line 139, in <module>
    run(save_path=alg_path,
  File "/home/pierre/git/ProbNES/semisupervised/module/bo.py", line 72, in run
    img = wandb.Image(optimizer.plot_synthesis())
  File "/home/pierre/git/ProbNES/semisupervised/module/optimizers.py", line 289, in plot_synthesis
    y_test = self.objective(X_test)
  File "/home/pierre/git/ProbNES/semisupervised/module/objective.py", line 49, in __call__
    f = self.evaluate_true(X=X)
  File "/home/pierre/miniconda3/envs/semisupervised/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/pierre/git/ProbNES/semisupervised/module/objective.py", line 36, in evaluate_true
    raise TypeError("Only torch tensor are allowed")
TypeError: Only torch tensor are allowed
[2024-05-22 20:22:07] INFO     <19640> evotorch.core: Instance of `Problem` (id:139587109603168) -- The `dtype` for the problem's decision variables is set as torch.float32
[2024-05-22 20:22:07] INFO     <19640> evotorch.core: Instance of `Problem` (id:139587109603168) -- `eval_dtype` (the dtype of the fitnesses and evaluation data) is set as torch.float32
[2024-05-22 20:22:07] INFO     <19640> evotorch.core: Instance of `Problem` (id:139587109603168) -- The `device` of the problem is set as cuda:0
[2024-05-22 20:22:07] INFO     <19640> evotorch.core: Instance of `Problem` (id:139587109603168) -- The number of actors that will be allocated for parallelized evaluation is 0